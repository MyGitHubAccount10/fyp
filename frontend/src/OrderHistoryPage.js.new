import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthContext } from './hooks/useAuthContext';
import './Website.css';
import Header from './Header';
import Footer from './Footer';

function OrderHistoryPage() {
    const [orders, setOrders] = useState([]);
    const [expandedOrderId, setExpandedOrderId] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { user } = useAuthContext();
    const navigate = useNavigate();

    useEffect(() => {
        const fetchOrders = async () => {
            if (!user) {
                navigate('/login');
                return;
            }

            try {
                setLoading(true);
                setError(null);

                // Fetch orders
                const ordersResponse = await fetch('/api/order', {
                    headers: {
                        'Authorization': `Bearer ${user.token}`
                    }
                });

                if (!ordersResponse.ok) {
                    throw new Error('Failed to fetch orders');
                }

                const ordersData = await ordersResponse.json();

                // Process each order
                const processedOrders = await Promise.all(ordersData.map(async (order) => {
                    try {
                        // Fetch order products
                        const orderProductsResponse = await fetch(`/api/order-products?order_id=${order._id}`, {
                            headers: { 'Authorization': `Bearer ${user.token}` }
                        });
                        
                        if (!orderProductsResponse.ok) {
                            throw new Error('Failed to fetch order products');
                        }

                        const orderProducts = await orderProductsResponse.json();

                        // Fetch product details for each order product
                        const productsWithDetails = await Promise.all(
                            orderProducts.map(async (op) => {
                                try {
                                    const productResponse = await fetch(`/api/product/${op.product_id}`, {
                                        headers: { 'Authorization': `Bearer ${user.token}` }
                                    });

                                    if (!productResponse.ok) {
                                        return {
                                            id: op._id,
                                            product_id: op.product_id,
                                            name: 'Product Not Found',
                                            quantity: op.order_qty,
                                            price: `S$${op.order_unit_price.toFixed(2)}`,
                                            size: op.order_size,
                                            imageUrl: '/images/placeholder.png'
                                        };
                                    }

                                    const product = await productResponse.json();
                                    return {
                                        id: op._id,
                                        product_id: op.product_id,
                                        name: product.name || 'Unknown Product',
                                        quantity: op.order_qty,
                                        price: `S$${op.order_unit_price.toFixed(2)}`,
                                        size: op.order_size,
                                        imageUrl: product.image ? `/images/${product.image}` : '/images/placeholder.png'
                                    };
                                } catch (error) {
                                    console.error('Error fetching product details:', error);
                                    return {
                                        id: op._id,
                                        product_id: op.product_id,
                                        name: 'Error Loading Product',
                                        quantity: op.order_qty,
                                        price: `S$${op.order_unit_price.toFixed(2)}`,
                                        size: op.order_size,
                                        imageUrl: '/images/placeholder.png'
                                    };
                                }
                            })
                        );

                        // Fetch status
                        const statusResponse = await fetch(`/api/status/${order.status_id}`, {
                            headers: { 'Authorization': `Bearer ${user.token}` }
                        });

                        let statusName = 'Unknown Status';
                        if (statusResponse.ok) {
                            const statusData = await statusResponse.json();
                            statusName = statusData.status_name;
                        }

                        return {
                            id: order._id,
                            date: new Date(order.order_date).toLocaleDateString('en-SG'),
                            totalAmount: `S$${order.total_amount.toFixed(2)}`,
                            status: statusName,
                            shippingAddress: `${order.shipping_address}, Singapore ${order.postal_code}`,
                            items: productsWithDetails,
                            payment_method: order.payment_method
                        };
                    } catch (error) {
                        console.error('Error processing order:', error);
                        return null;
                    }
                }));

                // Filter out any failed orders
                const validOrders = processedOrders.filter(order => order !== null);
                setOrders(validOrders);
            } catch (err) {
                console.error('Error fetching orders:', err);
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchOrders();
    }, [user, navigate]);

    const toggleOrderDetails = (orderId) => {
        setExpandedOrderId(prevId => (prevId === orderId ? null : orderId));
    };

    const getStatusClass = (status) => {
        switch (status.toLowerCase()) {
            case 'delivered': return 'status-delivered';
            case 'shipped': return 'status-shipped';
            case 'processing': return 'status-processing';
            case 'cancelled': return 'status-cancelled';
            default: return '';
        }
    };

    return (
        <>
            <Header />
            <div className="container order-history-container">
                <h2>Order History</h2>

                {loading ? (
                    <p>Loading your orders...</p>
                ) : error ? (
                    <p className="error-message">{error}</p>
                ) : orders.length === 0 ? (
                    <p className="no-orders-message">You have no past orders.</p>
                ) : (
                    <div className="order-list">
                        {orders.map(order => (
                            <div className="order-card" key={order.id}>
                                <div className="order-card-header" onClick={() => toggleOrderDetails(order.id)} role="button" tabIndex="0" aria-expanded={expandedOrderId === order.id}>
                                    <div className="order-info-main">
                                        <span className="order-id">Order ID: {order.id}</span>
                                        <span className="order-date">Date: {order.date}</span>
                                    </div>
                                    <div className="order-info-secondary">
                                        <span className={`order-status ${getStatusClass(order.status)}`}>{order.status}</span>
                                        <span className="order-total">{order.totalAmount}</span>
                                        <span className={`details-arrow ${expandedOrderId === order.id ? 'expanded' : ''}`}>â–¼</span>
                                    </div>
                                </div>
                                {expandedOrderId === order.id && (
                                    <div className="order-card-details">
                                        <p><strong>Shipping Address:</strong> {order.shippingAddress}</p>
                                        <p><strong>Payment Method:</strong> {order.payment_method}</p>
                                        <strong>Items:</strong>
                                        <ul className="order-items-list">
                                            {order.items.map(item => (
                                                <li key={item.id} className="order-item-detail">
                                                    <img src={item.imageUrl} alt={item.name} className="order-item-image" />
                                                    <div className="order-item-info">
                                                        <span>{item.name}</span>
                                                        <span>Size: {item.size}</span>
                                                        <span>Quantity: {item.quantity}</span>
                                                        <span>{item.price}</span>
                                                    </div>
                                                </li>
                                            ))}
                                        </ul>
                                        <div className="order-actions-footer">
                                            <button className="btn-order-action">Track Package</button>
                                            <button className="btn-order-action btn-secondary">Need Help?</button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                )}
            </div>
            <Footer />
        </>
    );
}

export default OrderHistoryPage;
